app TodoApp {
  wasp: {
    version: "^0.9.0"
  },
  title: "TodoApp",
  dependencies: [
    ("@tailwindcss/forms", "^0.5.3"),
    ("@heroicons/react", "^2.0.16")
  ],

  db: {
    system: PostgreSQL
  },

  // use default authentication schema
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {},
    },
    onAuthFailedRedirectTo: "/login",
  }
}

// Signup Route
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/SignupPage"
}

// Login Route
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/LoginPage"
}

// Root Page Route
route RootRoute { path: "/", to: MainPage }
page MainPage {
  authRequired: true,
  component: import Main from "@client/MainPage.jsx"
}

// operation: query to get all tasks
query getTasks {
  fn: import { getTasks } from "@server/queries.js", // implementation found in server/queries.js
  entities: [Task] // query is related to tasks schema
}

// operation: action to create a new task
action createTask {
  fn: import { createTask } from "@server/actions.js",
  entities: [Task],
}

// operation: action to update a task
action updateTask {
  fn: import { updateTask } from "@server/actions.js",
  entities: [Task],
}

// Task schema
entity Task {=psl 
  id Int @id @default(autoincrement())
  description String
  isDone Boolean @default(false)
  user User? @relation(fields: [userId], references: [id])
  userId Int?
psl=}

// User schema
entity User {=psl
  id Int @id @default(autoincrement())
  username String @unique
  password String
  tasks Task[]
psl=}